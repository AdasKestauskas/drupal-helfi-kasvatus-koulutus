<?php

/**
 * @file
 * Functions to support theming in the HDBT Subtheme.
 */

use Drupal\Core\Cache\Cache;
use Drupal\helfi_tpr\Entity\Unit;
use Drupal\node\Entity\Node;

/**
 * Helper function to get the icons path.
 *
 * @return string|null
 *   Returns path for the icons SVG or null.
 */
function hdbt_subtheme_get_icons_path() {
  static $icon_path;
  if (!isset($icon_path)) {
    $theme_handler = \Drupal::service('theme_handler');
    $icon_path = '/' . $theme_handler->getTheme('hdbt_subtheme')->getPath() . '/dist/icons/sprite.svg';

    // Add icons path as a global variable.
    if (!empty($icon_path)) {
      return $icon_path;
    }
  }
  return $icon_path;
}

/**
 * Implements hook_preprocess().
 */
function hdbt_subtheme_preprocess(&$variables) {
  $variables['hdbt_subtheme_icons_path'] = hdbt_subtheme_get_icons_path();
  $variables['#attached']['drupalSettings']['hdbtSubthemeIconsPath'] = $variables['hdbt_subtheme_icons_path'];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_subtheme_preprocess_block(&$variables) {
  if (isset($variables['elements']['#id'])) {
    $variables['content']['#attributes']['block_id'] = $variables['elements']['#id'];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter for blocks.
 */
function hdbt_subtheme_theme_suggestions_block_alter(&$suggestions) {
  // Load theme suggestions for blocks from parent theme.
  foreach ($suggestions as &$suggestion) {
    $suggestion = str_replace('hdbt_subtheme_', '', $suggestion);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Provide block based menu suggestions.
 */
function hdbt_subtheme_theme_suggestions_menu_alter(&$suggestions, $variables) {
  if (isset($variables['attributes']['block_id'])) {
    $block_id = str_replace('hdbt_subtheme_', '', $variables['attributes']['block_id']);

    switch ($block_id) {
      case 'mobile_navigation':
        $suggestions[] = 'menu__mobile';
        break;

      case 'mainnavigation':
        $suggestions[] = 'menu__main__desktop';
        break;

      case 'main_navigation_level_2':
        $suggestions[] = 'menu__main__sidebar';
        break;

      case 'brandingnavigation':
        $suggestions[] = 'menu__main__branding';
        break;

      default:
        $suggestions[] = 'menu__' . $variables['attributes']['block_id'];
        break;
    }
  }
}

function hdbt_subtheme_preprocess_paragraph(array &$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  $paragraph_type = $paragraph->getType();

  // High school search paragraph.
  if (
    $paragraph_type == 'high_school_search' &&
    $paragraph->hasField('field_hs_search_units')
  ) {
    // Get all unit ids what content producer has selected for the unit search
    // view and set them as variables for the template.
    $unit_ids = [];
    $units = $paragraph->field_hs_search_units->getValue();
    $ids = [];
    foreach ($units as $unit) {
      $ids[] = $unit['target_id'];
      $unit_ids[] = 'tpr_unit:' . $unit['target_id'];
    }

    // Set the unit ids to a unit_search_arguments variable for the template.
    $variables['high_school_search_arguments'] = implode(',', $ids);

    // Get previously cached meta information field values and set them
    // if no cached items are found.
    $cached = \Drupal::cache()->get('high_school_search' . 'block' . $variables['current_langcode'] . $variables['high_school_search_arguments']);

    if (!$cached) {
      // Set meta information fields based on how content producer
      // has defined the fields.
      $meta = [];
      $fields = [
        'field_hs_search_meta_button',
      ];

      foreach ($fields as $field) {
        if ($paragraph->hasField($field)) {
          $meta[$field] = $paragraph->{$field}->value;
        }
      }

      // Cache the meta fields based on view id and units.
      if (!empty($meta) && !empty($unit_ids)) {
        $tags = array_merge(['paragraph:' . $paragraph->id()], $unit_ids);

        \Drupal::cache()->set(
          'high_school_search' . 'block' . $variables['current_langcode'] . $variables['high_school_search_arguments'],
          $meta,
          Cache::PERMANENT,
          $tags
        );
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_subtheme_preprocess_tpr_unit(&$variables) {
  if (!isset($variables['entity']) || !$variables['entity'] instanceof Unit) {
    return;
  }
  $entity = $variables['entity'];

  if (
    $entity->hasField('field_hs_front_page') &&
    !$entity->field_hs_front_page->isEmpty() &&
    $entity->field_hs_front_page->entity instanceof Node
  ) {
    $nid = $entity->field_hs_front_page->entity->id();
    $title = $entity->field_hs_front_page->entity->getTitle();
    $variables['high_school_front_page_nid'] = $nid;
    $variables['high_school_front_page_title'] = $title;
  }
}
